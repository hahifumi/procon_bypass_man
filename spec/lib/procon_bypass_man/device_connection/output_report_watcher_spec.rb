require "spec_helper"

describe ProconBypassMan::DeviceConnection::OutputReportWatcher do
  def to_raw(data)
    [data].pack("H*")
  end

  let(:report_watcher) { described_class.new }

  describe '#sent?' do
    context 'ignoreしている' do
      it do
        expect(report_watcher.sent?(sub_command: "48", sub_command_arg: "01")).to eq(true)
      end
    end

    context 'ignoreしていない' do
      it do
        expect(report_watcher.sent?(sub_command: "48", sub_command_arg: "00")).to eq(false)
      end
    end
  end

  describe '#mark_as_send' do
    context 'ignore' do
      it do
        report_watcher.mark_as_send(to_raw("0109000000000000000048010000"))
        expect(report_watcher.sent?(sub_command: "48", sub_command_arg: "01")).to eq(true)
      end
    end

    context 'not ignore' do
      it do
        report_watcher.mark_as_send(to_raw("0109000000000000000048000000"))
        expect(report_watcher.sent?(sub_command: "48", sub_command_arg: "00")).to eq(true)
      end
    end
  end

  describe '#mark_as_receive' do
    it do
      report_watcher.mark_as_send(to_raw("010000000000000000003001"))
      report_watcher.mark_as_receive(to_raw("2143810080007cb878903870098030"))
    end
  end

  shared_examples '入力と出力の突き合わせができること' do
    it do
      report_watcher.mark_as_send(output_report)
      report_watcher.mark_as_receive(input_report)
      expect(report_watcher.received?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(true)
    end
    it do
      report_watcher.mark_as_send(output_report)
      expect(report_watcher.received?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(false)
    end
    it do
      report_watcher.mark_as_send(output_report)
      expect(report_watcher.sent?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(true)
    end
    it { expect(report_watcher.sent?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(false) }
    it { expect(report_watcher.received?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(false) }
  end

  shared_examples '無視対象に登録されているときはそのように振る舞うこと' do
    it do
      report_watcher.mark_as_send(output_report)
      report_watcher.mark_as_receive(input_report)
      expect(report_watcher.received?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(true)
    end
    it do
      report_watcher.mark_as_send(output_report)
      expect(report_watcher.received?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(true)
    end
    it do
      report_watcher.mark_as_send(output_report)
      expect(report_watcher.sent?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(true)
    end
    it { expect(report_watcher.sent?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(true) }
    it { expect(report_watcher.received?(sub_command: sub_command, sub_command_arg: sub_command_arg)).to eq(true) }
  end

  describe '01-04: Bluetooth manual pairing' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "01" }
    let(:sub_command_arg) { "04" }
    let(:output_report) { to_raw("010e000000000000000001044c748786451c00043c4e696e74656e646f2053776974636800000000006800c0887c462e00") }
    let(:input_report) { to_raw("21ef81008000a6e8775b687101810103000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") }
  end

  describe '02-00: Request device info' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "02" }
    let(:sub_command_arg) { "00" }
    let(:output_report) { to_raw("010a0000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000") }
    let(:input_report) { to_raw("21ca81008000a7c8775b48710182020348030298b6e942bd2d030100000000000000000000000000000000000000000000000000000000000000000000000000") }
  end

  describe '03-30: Set input report mode' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "03" }
    let(:sub_command_arg) { "30" }
    let(:output_report) { to_raw("010f0001404000014040033000000000000000000000000000000000000000000000000000000000000000000000000000") }
    let(:input_report) { to_raw("21f781008000a6d87757487101800300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") }
  end

  describe '04-00: Trigger buttons elapsed time' do
    include_examples '無視対象に登録されているときはそのように振る舞うこと'

    let(:sub_command) { "04" }
    let(:sub_command_arg) { "00" }
    let(:output_report) { to_raw("01000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000") }
    let(:input_report) { to_raw("210081008000a6e8775958710183040000b73a553ab33a0000000000000000000000000000000000000000000000000000000000000000000000000000000000") }
  end

  describe '08-00: Set shipment low power state' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "08" }
    let(:sub_command_arg) { "00" }
    let(:output_report) { to_raw("010b0000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000") }
    let(:input_report) { to_raw("21d481008000a7d8775b687101800800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000") }
  end

  describe '10-28: SPI flash read' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "10" }
    let(:sub_command_arg) { "28" }
    let(:output_report) { to_raw("010600000000000000001028800000180000000") }
    let(:input_report) { to_raw("212d81008000a6d8775b68710190102880000018eefea9004602004000400040f7fffdff0900e73be73be73b00") }
  end

  describe '10-3d: SPI flash read' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "10" }
    let(:sub_command_arg) { "3d" }
    let(:output_report) { to_raw("01050000000000000000103d6000001900000000000000000000") }
    let(:input_report) { to_raw("212681008000a7e8775968710190103d60000019db255d4b287bd3955769c872f3f55caeb560ff323232ffffff0000000") }
  end

  describe '10-98: SPI flash read' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "10" }
    let(:sub_command_arg) { "98" }
    let(:output_report) { to_raw("010200000000000000001098600000120000") }
    let(:input_report) { to_raw("211681008000a7d8775a587101901098600000120f30619630f3d41454411554c7799c33366300000000") }
  end

  describe '10-10: SPI flash read' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "10" }
    let(:sub_command_arg) { "10" }
    let(:output_report) { to_raw("01040000000000000000101080000018000000") }
    let(:input_report) { to_raw("211c81008000a7c8775b48710190101080000018ffffffffffffffffffffffffffffffffffffffffffffb2a10000000000000000000000000000000000000000") }
  end

  describe '10-80: SPI flash read' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "10" }
    let(:sub_command_arg) { "80" }
    let(:output_report) { to_raw("0101000000000000000010806000001800") }
    let(:input_report) { to_raw("210a81008000a6d8775a5871019010806000001850fd0000c60f0f30619630f3d41454411554c7799c3336630000000000000000000000000000000000000000") }
  end

  describe '10-00: SPI flash read' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "10" }
    let(:sub_command_arg) { "00" }
    let(:output_report) { to_raw("010c0000000000000000100060000010000000000000000000000000000000000000000000000000000000000000000000") }
    let(:input_report) { to_raw("21de81008000a7e8775b78710190100060000010ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000") }
  end

  describe '10-50: SPI flash read' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "10" }
    let(:sub_command_arg) { "50" }
    let(:output_report) { to_raw("010d000000000000000010506000000d000000000000000000000000000000000000000000000000000000000000000000") }
    let(:input_report) { to_raw("21e681008000a6e8775b4871019010506000000d323232ffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000") }
  end

  describe '30-01: player light' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "30" }
    let(:sub_command_arg) { "01" }
    let(:output_report) { to_raw("010000000000000000003001") }
    let(:input_report) { to_raw("2143810080007cb878903870098030") }
  end

  describe '40-01: Enable IMU (6-Axis sensor)' do
    include_examples '入力と出力の突き合わせができること'

    let(:sub_command) { "40" }
    let(:sub_command_arg) { "01" }
    let(:output_report) { to_raw("0107000000000000000040010000") }
    let(:input_report) { to_raw("213881008000a4f8775b587101804000000000000") }
  end

  describe '#completed?' do
    it do
      expect(report_watcher.completed?).to eq(false)
    end

    context '一部のみreceiveしたとき' do
      before do
        report_watcher.mark_as_send("0107000000000000000040010000")
        report_watcher.mark_as_receive("213881008000a4f8775b587101804000000000000")
      end

      it do
        expect(report_watcher.completed?).to eq(false)
      end
    end

    context '実データ1' do
      let(:output_reports) {
        %w(
          010b0000000000000000480000000000000000000000000000000000000000000000000000000000000000000000000000
          010c0000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000
          010d0000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000
          010e0000000000000000100060000010000000000000000000000000000000000000000000000000000000000000000000
          010f000000000000000010506000000d000000000000000000000000000000000000000000000000000000000000000000
          0100000000000000000001044c748786451c00043c4e696e74656e646f2053776974636800000000006800c0887c462e00
          01010001404000014040033000000000000000000000000000000000000000000000000000000000000000000000000000
          01020000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000
          01030000000000000000108060000018000000000000000000000000000000000000000000000000000000000000000000
          01040000000000000000109860000012000000000000000000000000000000000000000000000000000000000000000000
          01060000000000000000101080000018000000000000000000000000000000000000000000000000000000000000000000
          01070000000000000000103d60000019000000000000000000000000000000000000000000000000000000000000000000
          01080000000000000000102880000018000000000000000000000000000000000000000000000000000000000000000000
          01090001404000014040400100000000000000000000000000000000000000000000000000000000000000000000000000
          010a0000000000000000480100000000000000000000000000000000000000000000000000000000000000000000000000
          010b0001404000014040480100000000000000000000000000000000000000000000000000000000000000000000000000
          010c0000000000000000300100000000000000000000000000000000000000000000000000000000000000000000000000
        )
      }
      let(:input_reports) {
        %w(
          21ba81008000c0187860086f09804800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21c181008000c1287860386f0482020348030298b6e942bd2d030100000000000000000000000000000000000000000000000000000000000000000000000000
          21c981008000c2387861286f04800800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21d181008000c238785d286f0490100060000010ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
          21d981008000c2187861286f049010506000000d323232ffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000
          21de81008000c3287862286f04810103000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21e981008000c3387860386f04800300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21f381008000c328785f386f04830400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21fc81008000c328785d386f049010806000001850fd0000c60f0f30619630f3d41454411554c7799c3336630000000000000000000000000000000000000000
          210581008000c3087860386f04901098600000120f30619630f3d41454411554c7799c3336630000000000000000000000000000000000000000000000000000
          210d81008000c238785f586f0490101080000018ffffffffffffffffffffffffffffffffffffffffffffb2a10000000000000000000000000000000000000000
          211581008000c4387861186f0490103d60000019db255d4b287bd3955769c872f3f55caeb560ff323232ffffff00000000000000000000000000000000000000
          211e81008000c338785f286f0490102880000018eefea9004602004000400040f7fffdff0900e73be73be73b0000000000000000000000000000000000000000
          212a81008000c3487861186f04804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          213381008000c0387861386f04804800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          213c81008000c2387861386f09804800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          214581008000c2487860186f0a803000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        )
      }
      it do
        output_reports.each do |report|
          report_watcher.mark_as_send(to_raw(report))
        end
        input_reports.each do |report|
          report_watcher.mark_as_receive(to_raw(report))
        end
        expect(report_watcher.completed?).to eq(true)
      end
    end

    context '実データ2' do
      let(:output_reports) {
        %w(
          01000000000000000000480000000000000000000000000000000000000000000000000000000000000000000000000000
          01010000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000
          01020000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000
          01030000000000000000100060000010000000000000000000000000000000000000000000000000000000000000000000
          0104000000000000000010506000000d000000000000000000000000000000000000000000000000000000000000000000
          0105000000000000000001044c748786451c00043c4e696e74656e646f2053776974636800000000006800c0887c462e00
          01070000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000
          01080000000000000000108060000018000000000000000000000000000000000000000000000000000000000000000000
          01090000000000000000109860000012000000000000000000000000000000000000000000000000000000000000000000
          010b0000000000000000101080000018000000000000000000000000000000000000000000000000000000000000000000
          010d0000000000000000101080000018000000000000000000000000000000000000000000000000000000000000000000
          01000000000000000000101080000018000000000000000000000000000000000000000000000000000000000000000000
          01020000000000000000102880000018000000000000000000000000000000000000000000000000000000000000000000
          01030000000000000000400100000000000000000000000000000000000000000000000000000000000000000000000000
          01040000000000000000480100000000000000000000000000000000000000000000000000000000000000000000000000
          01090000000000000000480100000000000000000000000000000000000000000000000000000000000000000000000000
          010a0000000000000000300100000000000000000000000000000000000000000000000000000000000000000000000000
        )
      }
      let(:input_reports) {
        %w(
          21e9810080004d1876a558720c82020348030298b6e942bd2d030100000000000000000000000000000000000000000000000000000000000000000000000000
          21f5810080004b1876a5487209800800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21fe810080004c2876a648720a90100060000010ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
          2107810080004d1876a428720a9010506000000d323232ffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000
          210f810080004b2876a558720b810103000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          211a810080004d2876a648720b800300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          2124810080004d0876a758720a8304e36a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          212c810080004d2876a548720c9010806000001850fd0000c60f0f30619630f3d41454411554c7799c3336630000000000000000000000000000000000000000
          2135810080004d0876a5587209901098600000120f30619630f3d41454411554c7799c3336630000000000000000000000000000000000000000000000000000
          21ba810080004c2876a658720890101080000018ffffffffffffffffffffffffffffffffffffffffffffb2a10000000000000000000000000000000000000000
          21c2810080004c2876a658720990103d60000019db255d4b287bd3955769c872f3f55caeb560ff323232ffffff00000000000000000000000000000000000000
          21cd810080004c1876a448720c90102880000018eefea9004602004000400040f7fffdff0900e73be73be73b0000000000000000000000000000000000000000
          21d9810080004d2876a4387209804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21e1810080004d1876a6687209804800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          2127810080004c1876a558720b804800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          2130810080004c1876a548720a803000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        )
      }
      it do
        output_reports.each do |report|
          report_watcher.mark_as_send(to_raw(report))
        end
        input_reports.each do |report|
          report_watcher.mark_as_receive(to_raw(report))
        end
        expect(report_watcher.completed?).to eq(true)
      end
    end

    context '実データ3' do
      let(:output_reports) {
        %w(
          010a0000000000000000400100000000000000000000000000000000000000000000000000000000000000000000000000
          010b0000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000
          010c0000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000
          010d0000000000000000100060000010000000000000000000000000000000000000000000000000000000000000000000
          010e000000000000000010506000000d000000000000000000000000000000000000000000000000000000000000000000
          010f000000000000000001044c748786451c00043c4e696e74656e646f2053776974636800000000006800c0bb7c462e00
          01000001404000014040033000000000000000000000000000000000000000000000000000000000000000000000000000
          01010000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000
          01020000000000000000108060000018000000000000000000000000000000000000000000000000000000000000000000
          01030000000000000000109860000012000000000000000000000000000000000000000000000000000000000000000000
          01040000000000000000101080000018000000000000000000000000000000000000000000000000000000000000000000
          01050000000000000000103d60000019000000000000000000000000000000000000000000000000000000000000000000
          01080000000000000000103d60000019000000000000000000000000000000000000000000000000000000000000000000
          01090001404000014040102880000018000000000000000000000000000000000000000000000000000000000000000000
          01080000000000000000103d60000019000000000000000000000000000000000000000000000000000000000000000000
          01090001404000014040102880000018000000000000000000000000000000000000000000000000000000000000000000
          010a0000000000000000400100000000000000000000000000000000000000000000000000000000000000000000000000
          010b0000000000000000480100000000000000000000000000000000000000000000000000000000000000000000000000
          010c0001404000014040480100000000000000000000000000000000000000000000000000000000000000000000000000
          010d0000000000000000300100000000000000000000000000000000000000000000000000000000000000000000000000
        )
      }
      let(:input_reports) {
        %w(
          21a6810080009f58789468710b804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21a9810080009f58789598710b82020348030298b6e942bd2d030100000000000000000000000000000000000000000000000000000000000000000000000000
          21af810080009e58789588710b800800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21b581008000a158789468710b90100060000010ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
          21ba810080009f38789678710c9010506000000d323232ffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000
          21bf810080009e58789448710c810103000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21c681008000a038789378710a800300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21ce81008000a038789488710c830400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          21d4810080009f58789588710c9010806000001850fd0000c60f0f30619630f3d41454411554c7799c3336630000000000000000000000000000000000000000
          21dc810080009c387894787109901098600000120f30619630f3d41454411554c7799c3336630000000000000000000000000000000000000000000000000000
          21e381008000a058789678710990101080000018ffffffffffffffffffffffffffffffffffffffffffffb2a10000000000000000000000000000000000000000
          2129810080009e58789568710c90103d60000019db255d4b287bd3955769c872f3f55caeb560ff323232ffffff00000000000000000000000000000000000000
          2129810080009e58789568710c90103d60000019db255d4b287bd3955769c872f3f55caeb560ff323232ffffff00000000000000000000000000000000000000
          2132810080009f38789578710a90102880000018eefea9004602004000400040f7fffdff0900e73be73be73b0000000000000000000000000000000000000000
          213d810080009f38789388710b804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          2142810080009e48789458710b804800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          214981008000a048789698710c804800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
          2151810080009f48789468710c803000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        )
      }
      it do
        output_reports.each do |report|
          report_watcher.mark_as_send(to_raw(report))
        end
        input_reports.each do |report|
          report_watcher.mark_as_receive(to_raw(report))
        end
        expect(report_watcher.completed?).to eq(true)
      end
    end
  end

  describe '#timeout_or_completed?' do
    it do
      expect(report_watcher.completed?).to eq(false)
    end

    context 'timeoutしたとき' do
      before do
        Timecop.freeze(Time.now - 10) do
          report_watcher
        end
      end

      it do
        expect(report_watcher.timeout_or_completed?).to eq(true)
      end
    end

    context '一部のみreceiveしたとき' do
      before do
        report_watcher.mark_as_send("0107000000000000000040010000")
        report_watcher.mark_as_receive("213881008000a4f8775b587101804000000000000")
      end

      it do
        expect(report_watcher.completed?).to eq(false)
      end
    end

    xcontext '全部receiveする' do
    end
  end
end
